<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Post - Wavelength Community Forum</title>
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/icons/favicon.svg">
    
    <!-- Reuse existing styles -->
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="stylesheet" href="/css/carousel.css">
    <link rel="stylesheet" href="/css/forum.css">
    
    <!-- Firebase SDK - Direct imports for better compatibility -->
    <script type="module">
      import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.0/firebase-app.js';
      import { getAuth, signInWithPopup, GoogleAuthProvider, signOut, onAuthStateChanged, setPersistence, browserLocalPersistence } from 'https://www.gstatic.com/firebasejs/10.7.0/firebase-auth.js';
      import { getDatabase, ref, push, set, onValue, query, orderByChild, serverTimestamp, get, update } from 'https://www.gstatic.com/firebasejs/10.7.0/firebase-database.js';
      
      // Initialize Firebase with environment config
      const firebaseConfig = {
        apiKey: "<%= process.env.API_KEY %>",
        authDomain: "<%= process.env.AUTH_DOMAIN %>",
        databaseURL: "<%= process.env.DATABASE_URL %>",
        projectId: "<%= process.env.PROJECT_ID %>",
        storageBucket: "<%= process.env.STORAGE_BUCKET %>",
        messagingSenderId: "<%= process.env.MESSAGING_SENDER_ID %>",
        appId: "<%= process.env.APP_ID %>"
      };
      
      console.log('üî• Initializing Firebase for post page...');
      
      const app = initializeApp(firebaseConfig);
      const auth = getAuth(app);
      const database = getDatabase(app);
      
      // Configure Firebase Auth persistence for 2-week sessions
      setPersistence(auth, browserLocalPersistence).then(() => {
        console.log('‚úÖ Firebase Auth persistence set to LOCAL for extended sessions');
        
        // Initialize session manager if not already present
        if (!window.sessionManager) {
          window.sessionManager = {
            SESSION_DURATION: 14 * 24 * 60 * 60 * 1000,
            isSessionValid: function() {
              const lastActivity = localStorage.getItem('wavelength_last_activity');
              if (!lastActivity) return false;
              const now = Date.now();
              const timeSinceActivity = now - parseInt(lastActivity);
              return timeSinceActivity < this.SESSION_DURATION;
            },
            updateActivity: function() {
              localStorage.setItem('wavelength_last_activity', Date.now().toString());
            },
            clearExpiredSession: function() {
              if (!this.isSessionValid()) {
                localStorage.removeItem('wavelength_last_activity');
                auth.signOut();
                return true;
              }
              return false;
            }
          };
        }
        
        window.sessionManager.clearExpiredSession();
      }).catch((error) => {
        console.error('‚ùå Failed to set Firebase persistence:', error);
      });
      
      // Make Firebase available globally for forum components (including post-specific functions)
      window.firebaseAuth = auth;
      window.firebaseDB = database;
      window.firebaseUtils = { signInWithPopup, GoogleAuthProvider, signOut, onAuthStateChanged, setPersistence, browserLocalPersistence, ref, push, set, onValue, query, orderByChild, serverTimestamp, get, update };
      
      console.log('‚úÖ Firebase initialized successfully for post page');
    </script>
    
    <!-- Forum JavaScript -->
    <script src="/js/forum.js" defer></script>
    <script src="/js/forum-activity.js" defer></script>
</head>
<body>
    <!-- Include existing navigation -->
    <%- include('../partials/header') %>
    
    <div class="forum-container">
        <!-- Forum Header -->
        <header class="forum-header">
            <h1 class="forum-title">Wavelength Community Forum</h1>
            <p class="forum-subtitle">Connect with fellow Wavelength fans</p>
        </header>
        
        <!-- Authentication Section -->
        <section class="auth-section">
            <div id="forum-auth-container">
                <div class="guest-message">Sign in to participate in discussions</div>
                <div class="auth-actions">
                    <button class="btn btn-primary" onclick="window.forumJS.signInWithGoogle()">Sign in with Google</button>
                </div>
            </div>
        </section>
        
        <!-- Forum Navigation -->
        <nav class="forum-nav">
            <div class="forum-nav-links">
                <a href="/forum" class="forum-nav-link">üè† Home</a>
                <a href="/forum/recent" class="forum-nav-link">üïí Recent Posts</a>
                <a href="/forum/popular" class="forum-nav-link">üî• Popular</a>
                <a href="/forum/search" class="forum-nav-link">üîç Search</a>
                <a href="/" class="forum-nav-link">‚Üê Back to Wavelength Lore</a>
            </div>
        </nav>
        
        <!-- Breadcrumbs -->
        <div class="breadcrumbs">
            <span class="breadcrumb-item">
                <a href="/forum" class="breadcrumb-link">Forum</a>
            </span>
            <span class="breadcrumb-item" id="category-breadcrumb">
                <a href="#" class="breadcrumb-link" id="category-link">Loading...</a>
            </span>
            <span class="breadcrumb-item" id="post-breadcrumb">Loading post...</span>
        </div>
        
        <!-- Post Content -->
        <div class="post-container" id="post-container">
            <div class="loading-placeholder">
                <div class="loading-spinner"></div>
                <p>Loading post...</p>
            </div>
        </div>
        
        <!-- Reply Section -->
        <div class="reply-section" id="reply-section">
            <div class="reply-header">
                <h3>üí¨ Replies (<span id="reply-count">0</span>)</h3>
                <button class="btn btn-primary" id="reply-btn" onclick="showReplyForm()" style="display: none;">
                    üí¨ Reply to Post
                </button>
                <div id="sign-in-prompt" style="display: none;">
                    <button class="btn btn-secondary" onclick="signInToReply()">
                        üîê Sign In to Reply
                    </button>
                </div>
            </div>
            
            <!-- Reply Form -->
            <div class="reply-form-container" id="reply-form-container" style="display: none;">
                <form id="reply-form" class="reply-form">
                    <div class="form-group">
                        <label for="reply-content">Your Reply *</label>
                        <textarea id="reply-content" name="content" required 
                                  placeholder="Share your thoughts on this post..."
                                  rows="6"></textarea>
                    </div>
                    <div class="form-actions">
                        <button type="button" class="btn btn-secondary" onclick="hideReplyForm()">
                            Cancel
                        </button>
                        <button type="submit" class="btn btn-primary">
                            üí¨ Post Reply
                        </button>
                    </div>
                </form>
            </div>
            
            <!-- Replies List -->
            <div class="replies-container" id="replies-container">
                <!-- Replies will be loaded here -->
            </div>
        </div>
        
        <!-- Post Not Found -->
        <div class="not-found-container" id="not-found-container" style="display: none;">
            <div class="not-found-content">
                <div class="not-found-icon">‚ùå</div>
                <h3>Post Not Found</h3>
                <p>The post you're looking for doesn't exist or may have been removed.</p>
                <div class="not-found-actions">
                    <a href="/forum" class="btn btn-primary">‚Üê Back to Forum</a>
                    <a href="/forum/create" class="btn btn-secondary">Create New Post</a>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Forum Modals -->
    <div id="forum-modals"></div>

    <script>
        // Post page state
        const postId = '<%= postId %>';
        let currentPost = null;
        let replies = [];
        
        // Utility function for robust token retrieval with retry logic
        async function getValidIdToken() {
            const user = window.firebaseAuth?.currentUser;
            if (!user) {
                throw new Error('No user authenticated');
            }
            
            const maxRetries = 3;
            let retryCount = 0;
            
            while (retryCount < maxRetries) {
                try {
                    // Force refresh token and wait a bit for it to propagate
                    const idToken = await user.getIdToken(true);
                    console.log(`‚úÖ Got ID token (attempt ${retryCount + 1}), length:`, idToken.length);
                    
                    // Wait a moment for token to be ready on first retry
                    if (retryCount > 0) {
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    }
                    
                    return idToken;
                } catch (tokenError) {
                    retryCount++;
                    console.warn(`‚ö†Ô∏è Token refresh attempt ${retryCount} failed:`, tokenError.message);
                    if (retryCount >= maxRetries) {
                        throw new Error('Failed to refresh authentication token after multiple attempts');
                    }
                    // Wait before retry
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
            }
        }
        
        // Initialize post page
        document.addEventListener('DOMContentLoaded', function() {
            if (postId && postId !== 'undefined') {
                loadPost();
                loadReplies();
                setupAuthListener();
                setupTypingIndicatorListener();
            } else {
                showNotFound();
            }
        });
        
        function setupAuthListener() {
            if (window.firebaseAuth && window.firebaseUtils) {
                window.firebaseUtils.onAuthStateChanged(window.firebaseAuth, (user) => {
                    console.log('Auth state changed:', user ? 'User signed in' : 'User signed out');
                    updateReplyButtonVisibility();
                    updateAuthUI();
                });
            } else {
                // Firebase not ready, try again
                setTimeout(setupAuthListener, 100);
            }
        }
        
        function updateReplyButtonVisibility() {
            const replyBtn = document.getElementById('reply-btn');
            const signInPrompt = document.getElementById('sign-in-prompt');
            const replySection = document.getElementById('reply-section');
            
            if (replyBtn && signInPrompt && replySection) {
                const user = window.firebaseAuth?.currentUser;
                const hasPost = currentPost && Object.keys(currentPost).length > 0;
                const isPostLocked = currentPost?.isLocked || false;
                
                console.log('Reply button visibility check:', {
                    user: !!user,
                    hasPost: hasPost,
                    isLocked: isPostLocked
                });
                
                if (hasPost) {
                    replySection.style.display = 'block';
                    
                    if (user && !isPostLocked) {
                        // Show reply button for authenticated users
                        replyBtn.style.display = 'inline-block';
                        signInPrompt.style.display = 'none';
                    } else if (!user) {
                        // Show sign-in prompt for unauthenticated users
                        replyBtn.style.display = 'none';
                        signInPrompt.style.display = 'inline-block';
                    } else {
                        // Post is locked
                        replyBtn.style.display = 'none';
                        signInPrompt.style.display = 'none';
                    }
                } else {
                    replySection.style.display = 'none';
                }
            }
        }
        
        function signInToReply() {
            if (window.firebaseAuth && window.firebaseUtils) {
                const provider = new window.firebaseUtils.GoogleAuthProvider();
                window.firebaseUtils.signInWithPopup(window.firebaseAuth, provider)
                    .then(() => {
                        console.log('Sign-in successful');
                        updateReplyButtonVisibility();
                    })
                    .catch((error) => {
                        console.error('Sign-in error:', error);
                        alert('Sign-in failed. Please try again.');
                    });
            }
        }
        
        async function loadPost() {
            try {
                const postRef = window.firebaseUtils.ref(window.firebaseDB, `forum/posts/${postId}`);
                
                // Set up real-time listener for live updates
                window.firebaseUtils.onValue(postRef, (snapshot) => {
                    const post = snapshot.val();
                    if (post) {
                        currentPost = { id: postId, ...post };
                        displayPost(currentPost);
                        updateBreadcrumbs(currentPost);
                        
                        // Update like button state in real-time
                        updateLikeButtonState(currentPost);
                        
                        // Update reply button visibility when post loads
                        updateReplyButtonVisibility();
                        
                        // Only increment view count once per session
                        if (!window.postViewIncremented) {
                            incrementViewCount();
                            window.postViewIncremented = true;
                        }
                    } else {
                        showNotFound();
                    }
                });
            } catch (error) {
                console.error('Error loading post:', error);
                showNotFound();
            }
        }
        
        function updateLikeButtonState(post) {
            const likeButton = document.querySelector('.post-action-btn');
            if (likeButton && window.forumState.currentUser) {
                const isLiked = post.likedBy && post.likedBy[window.forumState.currentUser.uid];
                likeButton.classList.toggle('liked', isLiked);
                
                // Update like count in real-time
                const likeText = likeButton.textContent.split(' ')[0]; // Keep the emoji
                likeButton.innerHTML = `${likeText} ${post.likes || 0}`;
            }
        }
        
        async function loadReplies() {
            try {
                const repliesRef = window.firebaseUtils.ref(window.firebaseDB, 'forum/replies');
                const repliesQuery = window.firebaseUtils.query(repliesRef, 
                    window.firebaseUtils.orderByChild('postId'));
                
                // Set up real-time listener for live reply updates
                window.firebaseUtils.onValue(repliesQuery, (snapshot) => {
                    const allReplies = snapshot.val();
                    if (allReplies) {
                        replies = Object.entries(allReplies)
                            .map(([id, reply]) => ({ id, ...reply }))
                            .filter(reply => reply.postId === postId)
                            .sort((a, b) => a.createdAt - b.createdAt);
                    } else {
                        replies = [];
                    }
                    displayReplies(replies);
                    
                    // Update reply count in real-time
                    updateReplyCount(replies.length);
                });
            } catch (error) {
                console.error('Error loading replies:', error);
            }
        }
        
        function updateReplyCount(count) {
            const countElement = document.getElementById('reply-count');
            if (countElement) {
                countElement.textContent = count;
            }
            
            // Also update the post stats
            const postStats = document.querySelector('.post-replies');
            if (postStats) {
                postStats.textContent = `üí¨ ${count} replies`;
            }
        }
        
        function displayPost(post) {
            const container = document.getElementById('post-container');
            const categoryNames = {
                'general': 'üéµ General Discussion',
                'lore': 'üìú Lore & Theories',
                'episodes': 'üé¨ Episode Discussions',
                'fanart': 'üé® Fan Creations'
            };
            
            const typeEmojis = {
                'discussion': 'üí¨',
                'question': '‚ùì',
                'theory': 'üß†',
                'fanart': 'üé®',
                'news': 'üì∞'
            };
            
            container.innerHTML = `
                <article class="post-full">
                    <header class="post-full-header">
                        <div class="post-full-meta">
                            <span class="post-category">${categoryNames[post.forumId] || post.forumId}</span>
                            <span class="post-type">${typeEmojis[post.type] || 'üí¨'} ${post.type}</span>
                            ${post.isPinned ? '<span class="post-pinned">üìå Pinned</span>' : ''}
                            ${post.isLocked ? '<span class="post-locked">üîí Locked</span>' : ''}
                        </div>
                        <h1 class="post-full-title">${escapeHtml(post.title)}</h1>
                        ${post.tags && post.tags.length > 0 ? `
                            <div class="post-tags">
                                ${post.tags.map(tag => `<a href="/forum/search?tag=${encodeURIComponent(tag)}" class="post-tag" onclick="searchByTag('${escapeHtml(tag)}'); return false;">#${tag}</a>`).join('')}
                            </div>
                        ` : ''}
                    </header>
                    
                    <div class="post-full-content">
                        <p>${escapeHtml(post.content).replace(/\n/g, '</p><p>')}</p>
                    </div>
                    
                    <!-- Post Attachments -->
                    ${post.attachments && post.attachments.length > 0 ? `
                        <div class="post-attachments">
                            <h4 class="attachments-title">üìé Attachments</h4>
                            <div class="attachments-grid">
                                ${post.attachments.map(attachment => {
                                    const isImage = attachment.type && attachment.type.startsWith('image/');
                                    const fileName = attachment.originalName || attachment.filename || 'Unknown file';
                                    const fileSize = attachment.size ? formatFileSize(attachment.size) : '';
                                    
                                    if (isImage) {
                                        return `
                                            <div class="attachment-item attachment-image">
                                                <div class="image-attachment">
                                                    <img src="${attachment.url}" alt="${escapeHtml(fileName)}" 
                                                         class="attachment-preview" onclick="openImageModal(this.src, '${escapeHtml(fileName)}')" />
                                                    <div class="image-overlay">
                                                        <span class="image-filename">${escapeHtml(fileName)}</span>
                                                        ${fileSize ? `<span class="image-filesize">${fileSize}</span>` : ''}
                                                    </div>
                                                </div>
                                            </div>
                                        `;
                                    } else {
                                        return `
                                            <div class="attachment-item attachment-file">
                                                <a href="${attachment.url}" target="_blank" class="file-attachment">
                                                    <div class="file-icon">üìÑ</div>
                                                    <div class="file-details">
                                                        <div class="file-name">${escapeHtml(fileName)}</div>
                                                        ${fileSize ? `<div class="file-size">${fileSize}</div>` : ''}
                                                    </div>
                                                    <div class="download-icon">‚¨áÔ∏è</div>
                                                </a>
                                            </div>
                                        `;
                                    }
                                }).join('')}
                            </div>
                        </div>
                    ` : ''}
                    
                    <footer class="post-full-footer">
                        <div class="post-author-info">
                            <img src="${post.authorAvatar || '/icons/hero-icon.svg'}" alt="${post.authorName}" class="author-avatar">
                            <div class="author-details">
                                <div class="author-name">
                                    <a href="/forum/user/${post.authorId}" class="author-link">
                                        ${escapeHtml(post.authorName)}
                                    </a>
                                </div>
                                <div class="post-date">Posted ${formatTimeAgo(post.createdAt)}</div>
                                ${post.updatedAt && post.updatedAt !== post.createdAt ? 
                                    `<div class="post-updated">Updated ${formatTimeAgo(post.updatedAt)}</div>` : ''}
                            </div>
                        </div>
                        
                        <div class="post-actions">
                            <button class="post-action-btn ${post.likedBy && post.likedBy[getCurrentUserId()] ? 'liked' : ''}" 
                                    onclick="togglePostLike('${post.id}')">
                                ‚ù§Ô∏è ${post.likes || 0}
                            </button>
                            
                            ${post.authorId === getCurrentUserId() ? `
                                <button class="post-action-btn delete-btn" 
                                        onclick="showDeleteConfirmation('${post.id}')"
                                        title="Delete this post">
                                    üóëÔ∏è Delete
                                </button>
                            ` : ''}
                            
                            <div class="post-stats">
                                <span class="post-views">üëÅÔ∏è ${post.views || 0} views</span>
                                <span class="post-replies">üí¨ ${post.replyCount || 0} replies</span>
                            </div>
                        </div>
                    </footer>
                </article>
            `;
            
            // Show reply section
            document.getElementById('reply-section').style.display = 'block';
        }
        
        function displayReplies(replies) {
            const container = document.getElementById('replies-container');
            const countElement = document.getElementById('reply-count');
            
            countElement.textContent = replies.length;
            
            if (replies.length === 0) {
                container.innerHTML = `
                    <div class="no-replies">
                        <div class="no-replies-icon">üí≠</div>
                        <p>No replies yet. Be the first to share your thoughts!</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = replies.map(reply => {
                const isLiked = reply.likedBy && window.forumState.currentUser && 
                               reply.likedBy[window.forumState.currentUser.uid];
                
                return `
                    <div class="reply-item" data-reply-id="${reply.id}">
                        <div class="reply-header">
                            <div class="reply-author">
                                <img src="${reply.authorAvatar || '/icons/hero-icon.svg'}" alt="${reply.authorName}" class="author-avatar-small">
                                <a href="/forum/user/${reply.authorId}" class="author-link">
                                    <span class="author-name">${escapeHtml(reply.authorName)}</span>
                                </a>
                            </div>
                            <div class="reply-date">${formatTimeAgo(reply.createdAt)}</div>
                        </div>
                        <div class="reply-content">
                            <p>${escapeHtml(reply.content).replace(/\n/g, '</p><p>')}</p>
                        </div>
                        <div class="reply-actions">
                            <button class="reply-action-btn ${isLiked ? 'liked' : ''}" 
                                    onclick="toggleReplyLike('${reply.id}')"
                                    data-reply-id="${reply.id}">
                                ‚ù§Ô∏è ${reply.likes || 0}
                            </button>
                            
                            ${reply.authorId === getCurrentUserId() ? `
                                <button class="reply-action-btn delete-btn" 
                                        onclick="showDeleteReplyConfirmation('${reply.id}')"
                                        title="Delete this reply">
                                    üóëÔ∏è Delete
                                </button>
                            ` : ''}
                        </div>
                    </div>
                `;
            }).join('');
            
            // Set up real-time like button listeners for replies
            setupReplyLikeListeners();
        }
        
        function setupReplyLikeListeners() {
            // This ensures like buttons update in real-time when other users like replies
            replies.forEach(reply => {
                const button = document.querySelector(`[data-reply-id="${reply.id}"]`);
                if (button && window.forumState.currentUser) {
                    const isLiked = reply.likedBy && reply.likedBy[window.forumState.currentUser.uid];
                    button.classList.toggle('liked', isLiked);
                }
            });
        }
        
        function updateBreadcrumbs(post) {
            const categoryNames = {
                'general': 'General Discussion',
                'lore': 'Lore & Theories',
                'episodes': 'Episode Discussions',
                'fanart': 'Fan Creations'
            };
            
            const categoryLink = document.getElementById('category-link');
            const postBreadcrumb = document.getElementById('post-breadcrumb');
            
            categoryLink.textContent = categoryNames[post.forumId] || post.forumId;
            categoryLink.href = `/forum/category/${post.forumId}`;
            
            postBreadcrumb.textContent = post.title.length > 50 ? 
                post.title.substring(0, 50) + '...' : post.title;
        }
        
        async function incrementViewCount() {
            if (!currentPost) return;
            
            try {
                const postRef = window.firebaseUtils.ref(window.firebaseDB, `forum/posts/${postId}/views`);
                const snapshot = await window.firebaseUtils.get(postRef);
                const currentViews = snapshot.val() || 0;
                await window.firebaseUtils.set(postRef, currentViews + 1);
            } catch (error) {
                console.error('Error incrementing view count:', error);
            }
        }
        
        function showReplyForm() {
            if (!window.forumState.isAuthenticated) {
                alert('Please sign in to reply to this post');
                return;
            }
            
            document.getElementById('reply-form-container').style.display = 'block';
            const textarea = document.getElementById('reply-content');
            textarea.focus();
            
            // Set up typing indicator
            setupTypingIndicator(textarea);
        }
        
        function setupTypingIndicator(textarea) {
            let typingTimer;
            let isTyping = false;
            
            const sendTypingStatus = (typing) => {
                if (window.forumState.isAuthenticated && window.forumState.currentUser) {
                    const typingRef = window.firebaseUtils.ref(window.firebaseDB, 
                        `forum/typing/${postId}/${window.forumState.currentUser.uid}`);
                    
                    if (typing) {
                        window.firebaseUtils.set(typingRef, {
                            name: window.forumState.currentUser.name,
                            timestamp: window.firebaseUtils.serverTimestamp()
                        });
                    } else {
                        window.firebaseUtils.set(typingRef, null);
                    }
                }
            };
            
            textarea.addEventListener('input', () => {
                if (!isTyping) {
                    isTyping = true;
                    sendTypingStatus(true);
                }
                
                clearTimeout(typingTimer);
                typingTimer = setTimeout(() => {
                    isTyping = false;
                    sendTypingStatus(false);
                }, 3000);
            });
            
            textarea.addEventListener('blur', () => {
                clearTimeout(typingTimer);
                isTyping = false;
                sendTypingStatus(false);
            });
        }
        
        function setupTypingIndicatorListener() {
            const typingRef = window.firebaseUtils.ref(window.firebaseDB, `forum/typing/${postId}`);
            
            window.firebaseUtils.onValue(typingRef, (snapshot) => {
                const typingUsers = snapshot.val();
                const container = document.getElementById('typing-indicator');
                
                if (!container) {
                    // Create typing indicator container
                    const indicator = document.createElement('div');
                    indicator.id = 'typing-indicator';
                    indicator.className = 'typing-indicator';
                    indicator.style.cssText = `
                        padding: 10px;
                        font-style: italic;
                        color: #7f8c8d;
                        font-size: 0.9rem;
                        min-height: 20px;
                    `;
                    
                    const replySection = document.getElementById('reply-section');
                    const repliesContainer = document.getElementById('replies-container');
                    replySection.insertBefore(indicator, repliesContainer);
                }
                
                if (typingUsers && window.forumState.currentUser) {
                    const currentUserId = window.forumState.currentUser.uid;
                    const otherTypingUsers = Object.entries(typingUsers)
                        .filter(([uid, data]) => uid !== currentUserId && data && data.name)
                        .map(([uid, data]) => data.name);
                    
                    if (otherTypingUsers.length > 0) {
                        const names = otherTypingUsers.slice(0, 3).join(', ');
                        const extra = otherTypingUsers.length > 3 ? ` and ${otherTypingUsers.length - 3} others` : '';
                        document.getElementById('typing-indicator').innerHTML = 
                            `üí≠ ${names}${extra} ${otherTypingUsers.length === 1 ? 'is' : 'are'} typing...`;
                    } else {
                        document.getElementById('typing-indicator').innerHTML = '';
                    }
                } else {
                    document.getElementById('typing-indicator').innerHTML = '';
                }
            });
        }
        
        function hideReplyForm() {
            document.getElementById('reply-form-container').style.display = 'none';
            document.getElementById('reply-content').value = '';
        }
        
        // Setup reply form submission
        document.addEventListener('DOMContentLoaded', function() {
            const replyForm = document.getElementById('reply-form');
            if (replyForm) {
                replyForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    await submitReply();
                });
            }
        });
        
        async function submitReply() {
            const content = document.getElementById('reply-content').value.trim();
            
            if (!content) {
                alert('Please enter a reply');
                return;
            }
            
            if (!window.forumState.isAuthenticated) {
                alert('Please sign in to reply');
                return;
            }
            
            try {
                const replyData = {
                    postId: postId,
                    content: content,
                    authorId: window.forumState.currentUser.uid,
                    authorName: window.forumState.currentUser.name,
                    authorAvatar: window.forumState.currentUser.avatar,
                    createdAt: window.firebaseUtils.serverTimestamp(),
                    likes: 0,
                    status: 'published'
                };
                
                // Add reply to Firebase
                const repliesRef = window.firebaseUtils.ref(window.firebaseDB, 'forum/replies');
                await window.firebaseUtils.push(repliesRef, replyData);
                
                // Update post reply count
                const postRef = window.firebaseUtils.ref(window.firebaseDB, `forum/posts/${postId}`);
                const postSnapshot = await window.firebaseUtils.get(postRef);
                const postData = postSnapshot.val();
                
                if (postData) {
                    await window.firebaseUtils.update(postRef, {
                        replyCount: (postData.replyCount || 0) + 1,
                        lastActivity: window.firebaseUtils.serverTimestamp()
                    });
                }
                
                // Clear and hide form
                hideReplyForm();
                
            } catch (error) {
                console.error('Error submitting reply:', error);
                alert('Error submitting reply. Please try again.');
            }
        }
        
        async function togglePostLike(postId) {
            if (!window.forumState.isAuthenticated) {
                alert('Please sign in to like posts');
                return;
            }
            
            try {
                const postRef = window.firebaseUtils.ref(window.firebaseDB, `forum/posts/${postId}`);
                const snapshot = await window.firebaseUtils.get(postRef);
                const postData = snapshot.val();
                
                if (postData) {
                    const likedBy = postData.likedBy || {};
                    const userId = window.forumState.currentUser.uid;
                    
                    if (likedBy[userId]) {
                        // Unlike the post
                        delete likedBy[userId];
                        postData.likes = Math.max(0, (postData.likes || 0) - 1);
                    } else {
                        // Like the post
                        likedBy[userId] = {
                            name: window.forumState.currentUser.name,
                            timestamp: window.firebaseUtils.serverTimestamp()
                        };
                        postData.likes = (postData.likes || 0) + 1;
                    }
                    
                    postData.likedBy = likedBy;
                    await window.firebaseUtils.update(postRef, {
                        likes: postData.likes,
                        likedBy: postData.likedBy
                    });
                }
            } catch (error) {
                console.error('Error toggling post like:', error);
                alert('Error updating like. Please try again.');
            }
        }
        
        async function toggleReplyLike(replyId) {
            if (!window.forumState.isAuthenticated) {
                alert('Please sign in to like replies');
                return;
            }
            
            try {
                const replyRef = window.firebaseUtils.ref(window.firebaseDB, `forum/replies/${replyId}`);
                const snapshot = await window.firebaseUtils.get(replyRef);
                const replyData = snapshot.val();
                
                if (replyData) {
                    const likedBy = replyData.likedBy || {};
                    const userId = window.forumState.currentUser.uid;
                    
                    if (likedBy[userId]) {
                        // Unlike the reply
                        delete likedBy[userId];
                        replyData.likes = Math.max(0, (replyData.likes || 0) - 1);
                    } else {
                        // Like the reply
                        likedBy[userId] = {
                            name: window.forumState.currentUser.name,
                            timestamp: window.firebaseUtils.serverTimestamp()
                        };
                        replyData.likes = (replyData.likes || 0) + 1;
                    }
                    
                    await window.firebaseUtils.update(replyRef, {
                        likes: replyData.likes,
                        likedBy: likedBy
                    });
                }
            } catch (error) {
                console.error('Error toggling reply like:', error);
                alert('Error updating like. Please try again.');
            }
        }
        
        function showNotFound() {
            document.getElementById('post-container').style.display = 'none';
            document.getElementById('reply-section').style.display = 'none';
            document.getElementById('not-found-container').style.display = 'block';
        }
        
        function getCurrentUserId() {
            return window.forumState.currentUser ? window.forumState.currentUser.uid : null;
        }
        
        function formatTimeAgo(timestamp) {
            if (!timestamp) return 'Unknown time';
            
            const now = Date.now();
            const diff = now - timestamp;
            const minutes = Math.floor(diff / 60000);
            const hours = Math.floor(diff / 3600000);
            const days = Math.floor(diff / 86400000);
            
            if (minutes < 1) return 'Just now';
            if (minutes < 60) return `${minutes}m ago`;
            if (hours < 24) return `${hours}h ago`;
            if (days < 7) return `${days}d ago`;
            return new Date(timestamp).toLocaleDateString();
        }
        
        function escapeHtml(text) {
            if (!text) return '';
            const map = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;'
            };
            return text.replace(/[&<>"']/g, function(m) { return map[m]; });
        }
        
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        
        function openImageModal(src, filename) {
            // Create modal overlay
            const modal = document.createElement('div');
            modal.className = 'image-modal-overlay';
            modal.innerHTML = `
                <div class="image-modal">
                    <div class="image-modal-header">
                        <span class="image-modal-title">${escapeHtml(filename)}</span>
                        <button class="image-modal-close" onclick="closeImageModal()">&times;</button>
                    </div>
                    <div class="image-modal-content">
                        <img src="${src}" alt="${escapeHtml(filename)}" class="image-modal-img">
                    </div>
                    <div class="image-modal-footer">
                        <a href="${src}" target="_blank" class="btn btn-primary">Open in New Tab</a>
                    </div>
                </div>
            `;
            
            // Add click outside to close
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    closeImageModal();
                }
            });
            
            document.body.appendChild(modal);
            document.body.style.overflow = 'hidden';
        }
        
        function closeImageModal() {
            const modal = document.querySelector('.image-modal-overlay');
            if (modal) {
                modal.remove();
                document.body.style.overflow = '';
            }
        }
        
        // Delete confirmation functions
        function showDeleteConfirmation(postId) {
            const modal = document.createElement('div');
            modal.className = 'delete-modal-overlay';
            modal.innerHTML = `
                <div class="delete-modal">
                    <div class="delete-modal-header">
                        <h3>üóëÔ∏è Delete Post</h3>
                        <button class="modal-close-btn" onclick="closeDeleteModal()">&times;</button>
                    </div>
                    <div class="delete-modal-content">
                        <p><strong>Are you sure you want to delete this post?</strong></p>
                        <p>This action cannot be undone. The post and all its replies will be permanently deleted.</p>
                        ${currentPost?.attachments?.length > 0 ? 
                            `<p class="warning-text">‚ö†Ô∏è ${currentPost.attachments.length} file attachment(s) will also be deleted.</p>` : ''}
                    </div>
                    <div class="delete-modal-actions">
                        <button class="btn btn-secondary" onclick="closeDeleteModal()">Cancel</button>
                        <button class="btn btn-danger" onclick="confirmDeletePost('${postId}')">
                            üóëÔ∏è Delete Post
                        </button>
                    </div>
                </div>
            `;
            
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    closeDeleteModal();
                }
            });
            
            document.body.appendChild(modal);
            document.body.style.overflow = 'hidden';
        }
        
        function showDeleteReplyConfirmation(replyId) {
            const modal = document.createElement('div');
            modal.className = 'delete-modal-overlay';
            modal.innerHTML = `
                <div class="delete-modal">
                    <div class="delete-modal-header">
                        <h3>üóëÔ∏è Delete Reply</h3>
                        <button class="modal-close-btn" onclick="closeDeleteModal()">&times;</button>
                    </div>
                    <div class="delete-modal-content">
                        <p><strong>Are you sure you want to delete this reply?</strong></p>
                        <p>This action cannot be undone.</p>
                    </div>
                    <div class="delete-modal-actions">
                        <button class="btn btn-secondary" onclick="closeDeleteModal()">Cancel</button>
                        <button class="btn btn-danger" onclick="confirmDeleteReply('${replyId}')">
                            üóëÔ∏è Delete Reply
                        </button>
                    </div>
                </div>
            `;
            
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    closeDeleteModal();
                }
            });
            
            document.body.appendChild(modal);
            document.body.style.overflow = 'hidden';
        }
        
        function closeDeleteModal() {
            const modal = document.querySelector('.delete-modal-overlay');
            if (modal) {
                modal.remove();
                document.body.style.overflow = '';
            }
        }
        
        async function confirmDeletePost(postId) {
            try {
                console.log('üóëÔ∏è Deleting post:', postId);
                
                // Check authentication
                const user = window.firebaseAuth?.currentUser;
                if (!user) {
                    showNotification('You must be signed in to delete posts', 'error');
                    closeDeleteModal();
                    return;
                }
                
                console.log('üîê User authenticated:', user.uid);
                
                // Show loading state
                const deleteBtn = document.querySelector('.delete-modal .btn-danger');
                const originalText = deleteBtn.innerHTML;
                deleteBtn.innerHTML = '‚è≥ Deleting...';
                deleteBtn.disabled = true;
                
                // Get Firebase auth token with multiple retry attempts
                console.log('üé´ Getting ID token...');
                const idToken = await getValidIdToken();
                
                const response = await fetch(`/api/forum/posts/${postId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${idToken}`
                    }
                });
                
                const result = await response.json();
                console.log('üì® Response:', response.status, result);
                
                if (response.ok && result.success) {
                    console.log('‚úÖ Post deleted successfully');
                    closeDeleteModal();
                    showNotification('Post deleted successfully', 'success');
                    
                    // Redirect to forum home after 2 seconds
                    setTimeout(() => {
                        window.location.href = '/forum';
                    }, 2000);
                } else {
                    console.error('‚ùå Delete failed:', response.status, result);
                    throw new Error(result.message || `Server error: ${response.status}`);
                }
                
            } catch (error) {
                console.error('üí• Error deleting post:', error);
                
                // Show more specific error messages
                let errorMessage = error.message;
                if (error.message.includes('Token verification failed') || 
                    error.message.includes('Authentication expired') ||
                    error.message.includes('Token expired')) {
                    errorMessage = 'Authentication expired. Please refresh the page and try again.';
                } else if (error.message.includes('Authentication required')) {
                    errorMessage = 'Please sign in to delete posts.';
                } else if (error.message.includes('Not authorized')) {
                    errorMessage = 'You can only delete your own posts.';
                } else if (error.message.includes('Failed to refresh')) {
                    errorMessage = 'Authentication failed. Please sign out and sign in again.';
                }
                
                showNotification(`Failed to delete post: ${errorMessage}`, 'error');
                
                // Restore button state
                const deleteBtn = document.querySelector('.delete-modal .btn-danger');
                if (deleteBtn) {
                    deleteBtn.innerHTML = originalText;
                    deleteBtn.disabled = false;
                }
            }
        }
        
        async function confirmDeleteReply(replyId) {
            try {
                console.log('üóëÔ∏è Deleting reply:', replyId);
                
                // Check authentication
                const user = window.firebaseAuth?.currentUser;
                if (!user) {
                    showNotification('You must be signed in to delete replies', 'error');
                    closeDeleteModal();
                    return;
                }
                
                console.log('üîê User authenticated:', user.uid);
                
                // Show loading state
                const deleteBtn = document.querySelector('.delete-modal .btn-danger');
                const originalText = deleteBtn.innerHTML;
                deleteBtn.innerHTML = '‚è≥ Deleting...';
                deleteBtn.disabled = true;
                
                // Get Firebase auth token with multiple retry attempts
                console.log('üé´ Getting ID token...');
                const idToken = await getValidIdToken();
                
                const response = await fetch(`/api/forum/replies/${replyId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${idToken}`
                    }
                });
                
                const result = await response.json();
                console.log('üì® Response:', response.status, result);
                
                if (response.ok && result.success) {
                    console.log('‚úÖ Reply deleted successfully');
                    closeDeleteModal();
                    showNotification('Reply deleted successfully', 'success');
                    
                    // Remove the reply from the UI
                    const replyElement = document.querySelector(`[data-reply-id="${replyId}"]`);
                    if (replyElement) {
                        replyElement.remove();
                        
                        // Update reply count
                        const replyCountElement = document.getElementById('reply-count');
                        if (replyCountElement) {
                            const currentCount = parseInt(replyCountElement.textContent) || 0;
                            replyCountElement.textContent = Math.max(0, currentCount - 1);
                        }
                        
                        // Show no replies message if no replies left
                        const remainingReplies = document.querySelectorAll('.reply-item');
                        if (remainingReplies.length === 0) {
                            const container = document.getElementById('replies-container');
                            container.innerHTML = `
                                <div class="no-replies">
                                    <div class="no-replies-icon">üí≠</div>
                                    <p>No replies yet. Be the first to share your thoughts!</p>
                                </div>
                            `;
                        }
                    }
                } else {
                    console.error('‚ùå Delete failed:', response.status, result);
                    throw new Error(result.message || `Server error: ${response.status}`);
                }
                
            } catch (error) {
                console.error('üí• Error deleting reply:', error);
                
                // Show more specific error messages
                let errorMessage = error.message;
                if (error.message.includes('Token verification failed') || 
                    error.message.includes('Authentication expired') ||
                    error.message.includes('Token expired')) {
                    errorMessage = 'Authentication expired. Please refresh the page and try again.';
                } else if (error.message.includes('Authentication required')) {
                    errorMessage = 'Please sign in to delete replies.';
                } else if (error.message.includes('Not authorized')) {
                    errorMessage = 'You can only delete your own replies.';
                } else if (error.message.includes('Failed to refresh')) {
                    errorMessage = 'Authentication failed. Please sign out and sign in again.';
                }
                
                showNotification(`Failed to delete reply: ${errorMessage}`, 'error');
                
                // Restore button state
                const deleteBtn = document.querySelector('.delete-modal .btn-danger');
                if (deleteBtn) {
                    deleteBtn.innerHTML = originalText;
                    deleteBtn.disabled = false;
                }
            }
        }
        
        // Close modal on escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeImageModal();
            }
        });
        
        // Tag search functionality
        function searchByTag(tag) {
            // Redirect to forum home with tag filter
            window.location.href = `/forum?tag=${encodeURIComponent(tag)}`;
        }
    </script>
    
    <!-- Disambiguation Scripts -->
    <%- simpleDisambiguationScript %>
    <%- simpleDisambiguationStyles %>
</body>
</html>