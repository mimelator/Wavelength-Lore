<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create New Post - Wavelength Community Forum</title>
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/icons/favicon.svg">
    
    <!-- Reuse existing styles -->
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="stylesheet" href="/css/carousel.css">
    <link rel="stylesheet" href="/css/forum.css">
    
    <!-- Firebase SDK -->
    <!-- Firebase Configuration -->
    <script src="/js/firebase-config.js"></script>
    <script>
      // Initialize Firebase with configuration
      const firebaseConfig = {
        apiKey: "<%= process.env.API_KEY %>",
        authDomain: "<%= process.env.AUTH_DOMAIN %>",
        databaseURL: "<%= process.env.DATABASE_URL %>",
        projectId: "<%= process.env.PROJECT_ID %>",
        storageBucket: "<%= process.env.STORAGE_BUCKET %>",
        messagingSenderId: "<%= process.env.MESSAGING_SENDER_ID %>",
        appId: "<%= process.env.APP_ID %>"
      };
      
      // Initialize Firebase with 2-week session persistence
      window.initializeWavelengthFirebase(firebaseConfig).then(() => {
        console.log('Wavelength Forum Firebase initialized with extended sessions');
      }).catch(error => {
        console.error('Firebase initialization failed:', error);
      });
    </script>    <!-- Forum JavaScript -->
    <script src="/js/forum.js" defer></script>
</head>
<body>
    <!-- Include existing navigation -->
    <%- include('../partials/header') %>
    
    <div class="forum-container">
        <!-- Forum Header -->
        <header class="forum-header">
            <h1 class="forum-title">Create New Post</h1>
            <p class="forum-subtitle">Share your thoughts with the Wavelength community</p>
        </header>
        
        <!-- Authentication Section -->
        <section class="auth-section">
            <div id="forum-auth-container">
                <div class="guest-message">You must be signed in to create a post</div>
                <div class="auth-actions">
                    <button class="btn btn-primary" onclick="signInWithGoogle()">Sign in with Google</button>
                </div>
            </div>
        </section>
        
        <!-- Forum Navigation -->
        <nav class="forum-nav">
            <div class="forum-nav-links">
                <a href="/forum" class="forum-nav-link">🏠 Home</a>
                <a href="/forum/recent" class="forum-nav-link">🕒 Recent Posts</a>
                <a href="/forum/popular" class="forum-nav-link">🔥 Popular</a>
                <a href="/forum/search" class="forum-nav-link">🔍 Search</a>
                <a href="/" class="forum-nav-link">← Back to Wavelength Lore</a>
            </div>
        </nav>
        
        <!-- Breadcrumbs -->
        <div class="breadcrumbs">
            <span class="breadcrumb-item">
                <a href="/forum" class="breadcrumb-link">Forum</a>
            </span>
            <span class="breadcrumb-item">Create New Post</span>
        </div>
        
        <!-- Post Creation Form -->
        <div class="create-post-container" id="create-post-container" style="display: none;">
            <form id="create-post-form" class="create-post-form">
                <!-- Category Selection -->
                <div class="form-group">
                    <label for="post-category">Category *</label>
                    <select id="post-category" name="category" required>
                        <option value="">Select a category...</option>
                        <option value="general" <%= defaultCategory === 'general' ? 'selected' : '' %>>🎵 General Discussion</option>
                        <option value="lore" <%= defaultCategory === 'lore' ? 'selected' : '' %>>📜 Lore & Theories</option>
                        <option value="episodes" <%= defaultCategory === 'episodes' ? 'selected' : '' %>>🎬 Episode Discussions</option>
                        <option value="fanart" <%= defaultCategory === 'fanart' ? 'selected' : '' %>>🎨 Fan Creations</option>
                    </select>
                </div>
                
                <!-- Post Title -->
                <div class="form-group">
                    <label for="post-title">Title *</label>
                    <input type="text" id="post-title" name="title" required 
                           placeholder="Enter your post title..." maxlength="200"
                           value="<%= suggestedTitle || '' %>">
                    <small class="form-help">Make it descriptive and engaging!</small>
                </div>
                
                <!-- Post Tags -->
                <div class="form-group">
                    <label for="post-tags">Tags</label>
                    <input type="text" id="post-tags" name="tags" 
                           placeholder="Enter tags separated by commas (e.g., lucky, goblin king, theory)"
                           value="<% if (episodeTitle && seasonNumber && episodeNumber) { %>season<%= seasonNumber %>, episode<%= episodeNumber %>, <%= episodeTitle.toLowerCase().replace(/[^a-z0-9\s]/g, '').replace(/\s+/g, '-') %><% } else if (characterName) { %><%= characterName.toLowerCase().replace(/[^a-z0-9\s]/g, '').replace(/\s+/g, '-') %>, character, hero<% } else if (loreName && loreType) { %><%= loreName.toLowerCase().replace(/[^a-z0-9\s]/g, '').replace(/\s+/g, '-') %>, lore, <%= loreType %><% } %>">
                    <small class="form-help">Help others find your post with relevant tags</small>
                </div>
                
                <!-- Post Content -->
                <div class="form-group">
                    <label for="post-content">Content *</label>
                    <textarea id="post-content" name="content" required 
                              placeholder="Share your thoughts, theories, fan art, or discussion topics..."
                              rows="12"><% if (episodeTitle && seasonNumber && episodeNumber) { %>What did you think about <%= episodeTitle %>?

Share your thoughts about this episode:
- What was your favorite moment?
- Any theories or observations?
- How did it connect to the overall Wavelength story?

Season <%= seasonNumber %>, Episode <%= episodeNumber %> discussion thread.

<% } else if (characterName) { %>What are your thoughts about <%= characterName %>?

Let's discuss this character:
- What's your favorite thing about <%= characterName %>?
- How do they fit into the Wavelength universe?
- Any theories about their role or backstory?
- Which episodes feature them prominently?

Character discussion thread about <%= characterName %>.

<% } else if (loreName && loreType) { %>Let's discuss <%= loreName %>!

Share your thoughts about this <%= loreType %>:
- What role does <%= loreName %> play in the Wavelength universe?
- How does it connect to other lore elements?
- Any theories about its significance or history?
- Which episodes or characters interact with <%= loreName %>?

Lore discussion thread about <%= loreName %> (<%- loreType.charAt(0).toUpperCase() + loreType.slice(1) %>).

<% } %></textarea>
                    <small class="form-help">Support for links, mentions, and basic formatting</small>
                </div>
                
                <!-- File Attachments -->
                <div class="form-group">
                    <label for="post-attachments">Attachments</label>
                    <div class="file-upload-area">
                        <input type="file" id="post-attachments" name="attachments" multiple 
                               accept=".jpg,.jpeg,.png,.gif,.webp,.txt,.md,.pdf"
                               style="display: none;">
                        <div class="file-drop-zone" onclick="document.getElementById('post-attachments').click()">
                            <div class="file-drop-content">
                                <span class="file-upload-icon">📎</span>
                                <p>Click to select files or drag and drop</p>
                                <small>Images (JPG, PNG, GIF, WebP), Text files (TXT, MD), PDF - Max 1MB each, 5 files total</small>
                            </div>
                        </div>
                        <div id="file-preview-container" class="file-preview-container" style="display: none;">
                            <h4>Selected Files:</h4>
                            <div id="file-preview-list" class="file-preview-list"></div>
                            <button type="button" class="btn btn-small btn-secondary" onclick="clearSelectedFiles()">
                                🗑️ Clear All
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Post Type -->
                <div class="form-group">
                    <label for="post-type">Post Type</label>
                    <select id="post-type" name="type">
                        <option value="discussion">💬 Discussion</option>
                        <option value="question">❓ Question</option>
                        <option value="theory">🧠 Theory</option>
                        <option value="fanart">🎨 Fan Art</option>
                        <option value="news">📰 News</option>
                    </select>
                </div>
                
                <!-- Form Actions -->
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="window.history.back()">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-primary" onclick="previewPost()">
                        👁️ Preview
                    </button>
                    <button type="submit" class="btn btn-primary" id="submit-post-btn">
                        📝 Create Post
                    </button>
                </div>
            </form>
        </div>
        
        <!-- Post Preview -->
        <div class="post-preview-container" id="post-preview-container" style="display: none;">
            <div class="preview-header">
                <h3>Post Preview</h3>
                <div class="preview-actions">
                    <button type="button" class="btn btn-secondary" onclick="hidePreview()">
                        ✏️ Edit
                    </button>
                    <button type="button" class="btn btn-primary" onclick="submitPost()">
                        📝 Publish Post
                    </button>
                </div>
            </div>
            <div class="post-preview" id="post-preview">
                <!-- Preview content will be inserted here -->
            </div>
        </div>
        
        <!-- Loading State -->
        <div class="loading-container" id="loading-container" style="display: none;">
            <div class="loading-spinner"></div>
            <p>Creating your post...</p>
        </div>
        
        <!-- Success Message -->
        <div class="success-container" id="success-container" style="display: none;">
            <div class="success-icon">✅</div>
            <h3>Post Created Successfully!</h3>
            <p>Your post has been published and is now live in the forum.</p>
            <div class="success-actions">
                <button class="btn btn-primary" onclick="viewCreatedPost()">
                    👁️ View Post
                </button>
                <button class="btn btn-secondary" onclick="createAnotherPost()">
                    ➕ Create Another Post
                </button>
            </div>
        </div>
    </div>
    
    <!-- Forum Modals -->
    <div id="forum-modals"></div>

    <script>
        // Post creation page state
        let createdPostId = null;
        let selectedCategory = '<%= defaultCategory || "general" %>';
        let selectedFiles = [];
        
        // Initialize post creation page
        document.addEventListener('DOMContentLoaded', function() {
            setupAuthListener();
            setupFormHandlers();
            setupFileUpload();
            
            // Set default category if provided
            if (selectedCategory) {
                document.getElementById('post-category').value = selectedCategory;
            }
        });
        
        function setupFileUpload() {
            const fileInput = document.getElementById('post-attachments');
            const dropZone = document.querySelector('.file-drop-zone');
            
            // File input change handler
            fileInput.addEventListener('change', handleFileSelection);
            
            // Drag and drop handlers
            dropZone.addEventListener('dragover', handleDragOver);
            dropZone.addEventListener('dragleave', handleDragLeave);
            dropZone.addEventListener('drop', handleFileDrop);
        }
        
        function handleFileSelection(event) {
            const files = Array.from(event.target.files);
            processSelectedFiles(files);
        }
        
        function handleDragOver(event) {
            event.preventDefault();
            event.currentTarget.classList.add('drag-over');
        }
        
        function handleDragLeave(event) {
            event.currentTarget.classList.remove('drag-over');
        }
        
        function handleFileDrop(event) {
            event.preventDefault();
            event.currentTarget.classList.remove('drag-over');
            
            const files = Array.from(event.dataTransfer.files);
            processSelectedFiles(files);
        }
        
        function processSelectedFiles(files) {
            // Validate file count
            if (selectedFiles.length + files.length > 5) {
                alert('Maximum 5 files allowed');
                return;
            }
            
            // Validate and add files
            const validFiles = [];
            const maxSize = 1048576; // 1MB
            const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'text/plain', 'text/markdown', 'application/pdf'];
            
            for (const file of files) {
                // Check file size
                if (file.size > maxSize) {
                    alert(`File "${file.name}" is too large. Maximum size is 1MB.`);
                    continue;
                }
                
                // Check file type
                if (!allowedTypes.includes(file.type)) {
                    alert(`File "${file.name}" type not supported. Allowed: Images, Text files, PDF.`);
                    continue;
                }
                
                // Check for duplicates
                if (selectedFiles.some(f => f.name === file.name && f.size === file.size)) {
                    alert(`File "${file.name}" is already selected.`);
                    continue;
                }
                
                validFiles.push(file);
            }
            
            // Add valid files
            selectedFiles.push(...validFiles);
            updateFilePreview();
        }
        
        function updateFilePreview() {
            const container = document.getElementById('file-preview-container');
            const list = document.getElementById('file-preview-list');
            
            if (selectedFiles.length === 0) {
                container.style.display = 'none';
                return;
            }
            
            container.style.display = 'block';
            list.innerHTML = '';
            
            selectedFiles.forEach((file, index) => {
                const item = document.createElement('div');
                item.className = 'file-preview-item';
                
                const icon = getFileIcon(file.type);
                const size = formatFileSize(file.size);
                const type = getFileTypeLabel(file.type);
                
                item.innerHTML = `
                    <div class="file-preview-info">
                        <span class="file-preview-icon">${icon}</span>
                        <div class="file-preview-details">
                            <div class="file-preview-name">${escapeHtml(file.name)}</div>
                            <div class="file-preview-meta">${type} • ${size}</div>
                        </div>
                    </div>
                    <button type="button" class="file-remove-btn" onclick="removeFile(${index})">
                        ✕
                    </button>
                `;
                
                list.appendChild(item);
            });
        }
        
        function getFileIcon(mimeType) {
            if (mimeType.startsWith('image/')) return '🖼️';
            if (mimeType === 'text/plain') return '📄';
            if (mimeType === 'text/markdown') return '📝';
            if (mimeType === 'application/pdf') return '📋';
            return '📎';
        }
        
        function getFileTypeLabel(mimeType) {
            if (mimeType.startsWith('image/')) return 'Image';
            if (mimeType === 'text/plain') return 'Text';
            if (mimeType === 'text/markdown') return 'Markdown';
            if (mimeType === 'application/pdf') return 'PDF';
            return 'File';
        }
        
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        
        function removeFile(index) {
            selectedFiles.splice(index, 1);
            updateFilePreview();
        }
        
        function clearSelectedFiles() {
            selectedFiles = [];
            document.getElementById('post-attachments').value = '';
            updateFilePreview();
        }
        
        function setupAuthListener() {
            // Wait for Firebase to be ready
            const checkFirebaseReady = () => {
                if (window.firebaseAuth && window.firebaseUtils && window.forumState) {
                    window.firebaseUtils.onAuthStateChanged(window.firebaseAuth, (user) => {
                        const authSection = document.querySelector('.auth-section');
                        const createContainer = document.getElementById('create-post-container');
                        
                        if (user) {
                            // User is signed in
                            console.log('User authenticated:', user.email);
                            
                            // Update forum state
                            window.forumState.currentUser = {
                                uid: user.uid,
                                email: user.email,
                                name: user.displayName || user.email.split('@')[0],
                                avatar: user.photoURL || '/icons/hero-icon.svg'
                            };
                            window.forumState.isAuthenticated = true;
                            
                            // Update UI
                            authSection.style.display = 'none';
                            createContainer.style.display = 'block';
                            
                            if (typeof updateAuthUI === 'function') {
                                updateAuthUI();
                            }
                        } else {
                            // User is signed out
                            console.log('User not authenticated');
                            window.forumState.currentUser = null;
                            window.forumState.isAuthenticated = false;
                            authSection.style.display = 'block';
                            createContainer.style.display = 'none';
                        }
                    });
                } else {
                    // Firebase not ready yet, try again in 100ms
                    setTimeout(checkFirebaseReady, 100);
                }
            };
            
            checkFirebaseReady();
        }
        
        async function signInWithGoogle() {
            try {
                const provider = new window.firebaseUtils.GoogleAuthProvider();
                await window.firebaseUtils.signInWithPopup(window.firebaseAuth, provider);
                console.log('Sign-in successful');
            } catch (error) {
                console.error('Sign-in error:', error);
                alert('Sign-in failed. Please try again.');
            }
        }
        
        function setupFormHandlers() {
            const form = document.getElementById('create-post-form');
            if (form) {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    submitPost();
                });
            }
            
            // Auto-save draft (optional enhancement)
            const inputs = form.querySelectorAll('input, textarea, select');
            inputs.forEach(input => {
                input.addEventListener('input', saveDraft);
            });
        }
        
        function previewPost() {
            const formData = getFormData();
            if (!validateForm(formData)) return;
            
            const previewContainer = document.getElementById('post-preview-container');
            const createContainer = document.getElementById('create-post-container');
            const preview = document.getElementById('post-preview');
            
            // Generate preview HTML
            const categoryNames = {
                'general': '🎵 General Discussion',
                'lore': '📜 Lore & Theories',
                'episodes': '🎬 Episode Discussions',
                'fanart': '🎨 Fan Creations'
            };
            
            const typeEmojis = {
                'discussion': '💬',
                'question': '❓',
                'theory': '🧠',
                'fanart': '🎨',
                'news': '📰'
            };
            
            preview.innerHTML = `
                <div class="post-item preview">
                    <div class="post-header">
                        <div class="post-title-section">
                            <h2 class="post-title">${typeEmojis[formData.type]} ${escapeHtml(formData.title)}</h2>
                            <div class="post-meta-preview">
                                <span class="post-category">${categoryNames[formData.category]}</span>
                                ${formData.tags ? `<div class="post-tags">
                                    ${formData.tags.split(',').map(tag => `<span class="post-tag preview-tag">#${tag.trim()}</span>`).join('')}
                                </div>` : ''}
                            </div>
                        </div>
                    </div>
                    <div class="post-content">
                        <p>${escapeHtml(formData.content).replace(/\n/g, '</p><p>')}</p>
                    </div>
                    <div class="post-meta">
                        <div class="post-author">
                            <img src="${window.forumState.currentUser?.avatar || '/icons/hero-icon.svg'}" alt="Author" class="author-avatar-small">
                            <span class="author-name">${window.forumState.currentUser?.name || 'You'}</span>
                        </div>
                        <div class="post-stats">
                            <span class="post-time">Just now</span>
                            <span class="post-type">${typeEmojis[formData.type]} ${formData.type}</span>
                        </div>
                    </div>
                </div>
            `;
            
            createContainer.style.display = 'none';
            previewContainer.style.display = 'block';
        }
        
        function hidePreview() {
            const previewContainer = document.getElementById('post-preview-container');
            const createContainer = document.getElementById('create-post-container');
            
            previewContainer.style.display = 'none';
            createContainer.style.display = 'block';
        }
        
        async function submitPost() {
            const formData = getFormData();
            if (!validateForm(formData)) return;
            
            if (!window.forumState.isAuthenticated) {
                alert('Please sign in to create a post');
                return;
            }
            
            showLoading();
            
            try {
                // Create FormData for file upload
                const postFormData = new FormData();
                
                // Add text fields
                postFormData.append('title', formData.title);
                postFormData.append('content', formData.content);
                postFormData.append('forumId', formData.category);
                postFormData.append('type', formData.type);
                postFormData.append('authorId', window.forumState.currentUser.uid);
                postFormData.append('authorName', window.forumState.currentUser.name);
                
                // Add tags
                if (formData.tags) {
                    const tags = formData.tags.split(',').map(tag => tag.trim());
                    tags.forEach(tag => postFormData.append('tags', tag));
                }
                
                // Add selected files
                selectedFiles.forEach(file => {
                    postFormData.append('attachments', file);
                });
                
                console.log(`Submitting post with ${selectedFiles.length} attachments...`);
                
                // Submit to secure API endpoint
                const response = await fetch('/api/forum/posts', {
                    method: 'POST',
                    body: postFormData
                    // Don't set Content-Type header - let browser set it with boundary for multipart/form-data
                });
                
                const result = await response.json();
                
                if (!response.ok) {
                    throw new Error(result.message || 'Failed to create post');
                }
                
                console.log('Post created successfully:', result);
                createdPostId = result.post.id;
                
                // Also create post in Firebase for real-time updates (without files)
                const firebasePostData = {
                    id: result.post.id,
                    title: formData.title,
                    content: formData.content,
                    forumId: formData.category,
                    type: formData.type,
                    tags: formData.tags ? formData.tags.split(',').map(tag => tag.trim()) : [],
                    authorId: window.forumState.currentUser.uid,
                    authorName: window.forumState.currentUser.name,
                    authorAvatar: window.forumState.currentUser.avatar,
                    createdAt: Date.now(),
                    updatedAt: Date.now(),
                    likes: 0,
                    replyCount: 0,
                    views: 0,
                    isPinned: false,
                    isLocked: false,
                    status: 'published',
                    attachments: result.post.attachments || []
                };
                
                // Save to Firebase
                const postRef = window.firebaseUtils.ref(window.firebaseDB, `forum/posts/${result.post.id}`);
                await window.firebaseUtils.set(postRef, firebasePostData);
                
                // Update category post count
                await updateCategoryStats(formData.category);
                
                // Clear form and show success
                clearForm();
                showSuccess();
                
            } catch (error) {
                console.error('Error creating post:', error);
                hideLoading();
                alert(`Error creating post: ${error.message}`);
            }
        }
        
        async function updateCategoryStats(categoryId) {
            try {
                const categoryRef = window.firebaseUtils.ref(window.firebaseDB, `forum/categories/${categoryId}`);
                const categorySnapshot = await window.firebaseUtils.get(categoryRef);
                const categoryData = categorySnapshot.val() || {};
                
                const updatedData = {
                    ...categoryData,
                    postCount: (categoryData.postCount || 0) + 1,
                    lastActivity: window.firebaseUtils.serverTimestamp()
                };
                
                await window.firebaseUtils.set(categoryRef, updatedData);
            } catch (error) {
                console.error('Error updating category stats:', error);
            }
        }
        
        function getFormData() {
            return {
                category: document.getElementById('post-category').value,
                title: document.getElementById('post-title').value,
                tags: document.getElementById('post-tags').value,
                content: document.getElementById('post-content').value,
                type: document.getElementById('post-type').value
            };
        }
        
        function validateForm(data) {
            if (!data.category) {
                alert('Please select a category');
                return false;
            }
            if (!data.title.trim()) {
                alert('Please enter a title');
                return false;
            }
            if (!data.content.trim()) {
                alert('Please enter some content');
                return false;
            }
            if (data.title.length > 200) {
                alert('Title must be 200 characters or less');
                return false;
            }
            return true;
        }
        
        function showLoading() {
            document.getElementById('post-preview-container').style.display = 'none';
            document.getElementById('create-post-container').style.display = 'none';
            document.getElementById('loading-container').style.display = 'block';
        }
        
        function hideLoading() {
            document.getElementById('loading-container').style.display = 'none';
        }
        
        function showSuccess() {
            hideLoading();
            document.getElementById('success-container').style.display = 'block';
        }
        
        function clearForm() {
            document.getElementById('create-post-form').reset();
            clearSelectedFiles();
            if (selectedCategory) {
                document.getElementById('post-category').value = selectedCategory;
            }
        }
        
        function viewCreatedPost() {
            if (createdPostId) {
                window.location.href = `/forum/post/${createdPostId}`;
            }
        }
        
        function createAnotherPost() {
            document.getElementById('success-container').style.display = 'none';
            document.getElementById('create-post-container').style.display = 'block';
        }
        
        function saveDraft() {
            const formData = getFormData();
            localStorage.setItem('forum-draft', JSON.stringify(formData));
        }
        
        function loadDraft() {
            const draft = localStorage.getItem('forum-draft');
            if (draft) {
                const data = JSON.parse(draft);
                document.getElementById('post-category').value = data.category || selectedCategory;
                document.getElementById('post-title').value = data.title || '';
                document.getElementById('post-tags').value = data.tags || '';
                document.getElementById('post-content').value = data.content || '';
                document.getElementById('post-type').value = data.type || 'discussion';
            }
        }
        
        function escapeHtml(text) {
            const map = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;'
            };
            return text.replace(/[&<>"']/g, function(m) { return map[m]; });
        }
    </script>
    
    <!-- Disambiguation Scripts -->
    <%- simpleDisambiguationScript %>
    <%- simpleDisambiguationStyles %>
</body>
</html>