name: Build and Deploy to ECR

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: wavelength-lore
          IMAGE_TAG: latest
          COMMIT_SHA: ${{ github.sha }}
        run: |
          # Extract short commit SHA
          SHORT_SHA=${COMMIT_SHA:0:8}
          
          echo "Building with tags: $IMAGE_TAG and $SHORT_SHA"
          
          # Build the image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
          # Tag with commit SHA
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA
          
          # Push both tags
          echo "Pushing $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          echo "Pushing $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA
          
          echo "::notice::Successfully pushed images with tags: $IMAGE_TAG, $SHORT_SHA"
          echo "::notice::Commit SHA: $COMMIT_SHA"
          echo "::notice::Short SHA: $SHORT_SHA"

      - name: Invalidate CloudFront Cache (Optional)
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          if [ -n "$CLOUDFRONT_DISTRIBUTION_ID" ]; then
            aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
            echo "::notice::CloudFront cache invalidated for distribution: $CLOUDFRONT_DISTRIBUTION_ID"
          else
            echo "::warning::CLOUDFRONT_DISTRIBUTION_ID not set, skipping cache invalidation"
          fi